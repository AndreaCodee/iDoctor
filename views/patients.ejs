<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Patient Management</title>
    <!-- Bootstrap 5.3.x CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
    <style>
        .editable-cell {
            cursor: pointer;
            min-height: 38px;
            padding: 0.375rem 0.75rem;
        }

        .editable-cell:hover {
            background-color: #f8f9fa;
        }

        .editing {
            background-color: #fff3cd;
        }

        .value-display {
            font-family: monospace;
            background-color: #f8f9fa;
            padding: 0.5rem;
            border-radius: 0.25rem;
            margin: 0.5rem 0;
        }

        .value-label {
            font-weight: bold;
            color: #495057;
        }
    </style>
</head>

<body>
    <div class="container-fluid py-4">
        <nav class="mb-3">
            <a href="/" class="btn btn-outline-primary">
                <i class="bi bi-house-door"></i> Home
            </a>
        </nav>
        <div class="row mb-4">
            <div class="col">
                <h1 class="display-4">Patient Management</h1>
            </div>
            <div class="col-auto">
                <button class="btn btn-success btn-lg" data-bs-toggle="modal" data-bs-target="#addPatientModal">
                    <i class="bi bi-plus-circle"></i> Add Patient
                </button>
            </div>
        </div>

        <div class="table-responsive">
            <table class="table table-striped table-hover table-bordered">
                <thead class="table-dark">
                    <tr>
                        <th>ID</th>
                        <th>Name</th>
                        <th>Middle Name</th>
                        <th>Surname</th>
                        <th>Gender</th>
                        <th>Birthday</th>
                        <th>Birthplace</th>
                        <th>Province</th>
                        <th>Address</th>
                        <th>Fiscal Code</th>
                        <th>Business</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% patients.forEach(patient => { %>
                    <tr data-patient-id="<%= patient.id %>">
                        <td class="align-middle"><%= patient.id %></td>
                        <td class="editable-cell" data-field="name" data-type="text" onclick="makeEditable(this)">
                            <%= patient.name %>
                        </td>
                        <td class="editable-cell" data-field="middlename" data-type="text" onclick="makeEditable(this)">
                            <%= patient.middlename || '' %>
                        </td>
                        <td class="editable-cell" data-field="surname" data-type="text" onclick="makeEditable(this)">
                            <%= patient.surname %>
                        </td>
                        <td class="editable-cell" data-field="gender" data-type="select" onclick="makeEditable(this)">
                            <%= patient.gender || '' %>
                        </td>
                        <td class="editable-cell" data-field="birthday" data-type="date" onclick="makeEditable(this)">
                            <%= patient.birthday ? new Date(patient.birthday).toLocaleDateString('en-CA') : '' %>
                        </td>
                        <td class="editable-cell" data-field="birthplace" data-type="text" onclick="makeEditable(this)">
                            <%= patient.birthplace || '' %>
                        </td>
                        <td class="editable-cell" data-field="province" data-type="text" onclick="makeEditable(this)">
                            <%= patient.province || '' %>
                        </td>
                        <td class="editable-cell" data-field="address" data-type="text" onclick="makeEditable(this)">
                            <%= patient.address || '' %>
                        </td>
                        <td class="editable-cell" data-field="fiscalcode" data-type="text" onclick="makeEditable(this)">
                            <%= patient.fiscalcode %>
                        </td>
                        <td class="editable-cell" data-field="business" data-type="checkbox" onclick="makeEditable(this)">
                            <%= patient.business ? '✓' : '✗' %>
                        </td>
                        <td class="text-center">
                            <button class="btn btn-danger btn-sm" onclick="deletePatient(<%= patient.id %>)">
                                <i class="bi bi-trash"></i> Delete
                            </button>
                        </td>
                    </tr>
                    <% }); %>
                </tbody>
            </table>
        </div>
    </div>

    <!-- Confirmation Modal -->
    <div class="modal fade" id="confirmChangeModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-warning">
                    <h5 class="modal-title">
                        <i class="bi bi-exclamation-triangle"></i> Confirm Change
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to update this field?</p>
                    <div class="mb-3">
                        <div class="value-label">Field:</div>
                        <div class="value-display" id="confirmFieldName"></div>
                    </div>
                    <div class="mb-3">
                        <div class="value-label">Old Value:</div>
                        <div class="value-display" id="confirmOldValue"></div>
                    </div>
                    <div class="mb-3">
                        <div class="value-label">New Value:</div>
                        <div class="value-display text-primary fw-bold" id="confirmNewValue"></div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" id="cancelChangeBtn">
                        <i class="bi bi-x-circle"></i> Cancel
                    </button>
                    <button type="button" class="btn btn-warning" id="confirmChangeBtn">
                        <i class="bi bi-check-circle"></i> Confirm Change
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Patient Modal -->
    <div class="modal fade" id="addPatientModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add New Patient</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="addPatientForm">
                        <div class="mb-3">
                            <label for="name" class="form-label">Name</label>
                            <input type="text" class="form-control" id="name" required>
                        </div>
                        <div class="mb-3">
                            <label for="middlename" class="form-label">Middle Name</label>
                            <input type="text" class="form-control" id="middlename">
                        </div>
                        <div class="mb-3">
                            <label for="surname" class="form-label">Surname</label>
                            <input type="text" class="form-control" id="surname" required>
                        </div>
                        <div class="mb-3">
                            <label for="gender" class="form-label">Gender</label>
                            <select class="form-control" id="gender" required>
                                <option value="">Select gender</option>
                                <option value="M">Male</option>
                                <option value="F">Female</option>
                                <option value="O">Other</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="birthday" class="form-label">Birthday</label>
                            <input type="date" class="form-control" id="birthday" required>
                        </div>
                        <div class="mb-3">
                            <label for="birthplace" class="form-label">Birthplace</label>
                            <input type="text" class="form-control" id="birthplace" autocomplete="off" required>
                            <div id="cityDropdown" class="dropdown-menu" style="display: none; max-height: 200px; overflow-y: auto;"></div>
                        </div>
                        <div class="mb-3">
                            <label for="province" class="form-label">Province</label>
                            <input type="text" class="form-control" id="province" required readonly>
                        </div>
                        <div class="mb-3">
                            <label for="address" class="form-label">Address</label>
                            <input type="text" class="form-control" id="address">
                        </div>
                        <div class="mb-3">
                            <label for="fiscalcode" class="form-label">Fiscal Code</label>
                            <div class="input-group">
                                <input type="text" class="form-control" id="fiscalcode" required readonly>
                                <button class="btn btn-outline-secondary" type="button" id="generateFiscalCode">
                                    <i class="bi bi-arrow-clockwise"></i> Generate
                                </button>
                            </div>
                            <small class="form-text text-muted">Will be generated automatically when all required fields are filled.</small>
                        </div>
                        <div class="mb-3 form-check">
                            <input type="checkbox" class="form-check-input" id="business">
                            <label class="form-check-label" for="business">Business</label>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-success" onclick="submitNewPatient()">Add Patient</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS and Popper.js -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/js/fiscalcode.js"></script>
    
    <script>
        // Current editing cell reference
        let currentEditingCell = null;
        let pendingChange = null;
        let confirmModal = null;

        // Initialize confirmation modal
        document.addEventListener('DOMContentLoaded', () => {
            confirmModal = new bootstrap.Modal(document.getElementById('confirmChangeModal'));
            
            // Confirm button handler
            document.getElementById('confirmChangeBtn').addEventListener('click', () => {
                if (pendingChange) {
                    performSave(pendingChange);
                    confirmModal.hide();
                    pendingChange = null;
                }
            });

            // Cancel button handler
            document.getElementById('cancelChangeBtn').addEventListener('click', () => {
                if (pendingChange) {
                    cancelEdit(pendingChange.cell);
                    pendingChange = null;
                }
            });

            // Handle modal close
            document.getElementById('confirmChangeModal').addEventListener('hidden.bs.modal', () => {
                if (pendingChange) {
                    cancelEdit(pendingChange.cell);
                    pendingChange = null;
                }
            });
        });

        // Helper function to show notifications
        function showNotification(message, type = 'success') {
            const toast = document.createElement('div');
            toast.className = `toast align-items-center text-white bg-${type} position-fixed top-0 end-0 m-3`;
            toast.setAttribute('role', 'alert');
            toast.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">${message}</div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                </div>
            `;
            document.body.appendChild(toast);
            const bsToast = new bootstrap.Toast(toast);
            bsToast.show();
            toast.addEventListener('hidden.bs.toast', () => toast.remove());
        }

        // Format field name for display
        function formatFieldName(field) {
            return field.charAt(0).toUpperCase() + field.slice(1).replace(/([A-Z])/g, ' $1');
        }

        // Format value for display
        function formatValueDisplay(value, type) {
            if (value === null || value === undefined || value === '') {
                return '(empty)';
            }
            if (type === 'checkbox') {
                return value === '✓' || value === true ? 'Yes (✓)' : 'No (✗)';
            }
            return value;
        }

        // Make cell editable
        function makeEditable(cell) {
            if (cell.classList.contains('editing')) return;

            if (currentEditingCell && currentEditingCell !== cell) {
                saveCell(currentEditingCell);
            }

            const field = cell.dataset.field;
            const type = cell.dataset.type;
            const currentValue = cell.textContent.trim();

            cell.dataset.originalValue = currentValue;
            cell.classList.add('editing');
            currentEditingCell = cell;

            let inputElement;
            if (type === 'checkbox') {
                inputElement = document.createElement('input');
                inputElement.type = 'checkbox';
                inputElement.className = 'form-check-input';
                inputElement.checked = currentValue === '✓';
                inputElement.addEventListener('change', () => saveCell(cell));
            } else if (type === 'select' && field === 'gender') {
                inputElement = document.createElement('select');
                inputElement.className = 'form-control form-control-sm';
                ['', 'M', 'F', 'O'].forEach(value => {
                    const option = document.createElement('option');
                    option.value = value;
                    option.textContent = value || 'Select gender';
                    option.selected = value === currentValue;
                    inputElement.appendChild(option);
                });
            } else if (type === 'date') {
                inputElement = document.createElement('input');
                inputElement.type = 'date';
                inputElement.className = 'form-control form-control-sm';
                inputElement.value = currentValue;
            } else {
                inputElement = document.createElement('input');
                inputElement.type = 'text';
                inputElement.className = 'form-control form-control-sm';
                inputElement.value = currentValue;

                inputElement.addEventListener('blur', () => {
                    setTimeout(() => saveCell(cell), 150);
                });
                inputElement.addEventListener('keydown', (e) => {
                    if (e.key === 'Enter') {
                        e.preventDefault();
                        saveCell(cell);
                    }
                    if (e.key === 'Escape') {
                        e.preventDefault();
                        cancelEdit(cell);
                    }
                });
            }

            cell.textContent = '';
            cell.appendChild(inputElement);

            if (type !== 'checkbox') {
                setTimeout(() => inputElement.focus(), 0);
            }
        }

        // Save edited cell (now shows confirmation)
        function saveCell(cell) {
            if (!cell || !cell.classList.contains('editing')) return;

            const input = cell.querySelector('input, select');
            if (!input) return;

            const field = cell.dataset.field;
            const type = cell.dataset.type;
            const patientId = cell.closest('tr').dataset.patientId;
            const oldValue = cell.dataset.originalValue;
            let newValue;
            let updateData = {};

            if (type === 'checkbox') {
                newValue = input.checked ? '✓' : '✗';
                updateData[field] = input.checked;
            } else {
                newValue = input.value.trim();
                if (!newValue) {
                    if (field === 'name' || field === 'surname' || field === 'fiscalcode') {
                        showNotification(`${formatFieldName(field)} cannot be empty`, 'danger');
                        return;
                    }
                }
                updateData[field] = newValue;
            }

            // Check if value actually changed
            if (oldValue === newValue) {
                cancelEdit(cell);
                return;
            }

            // Show confirmation modal
            document.getElementById('confirmFieldName').textContent = formatFieldName(field);
            document.getElementById('confirmOldValue').textContent = formatValueDisplay(oldValue, type);
            document.getElementById('confirmNewValue').textContent = formatValueDisplay(newValue, type);

            pendingChange = {
                cell: cell,
                newValue: newValue,
                updateData: updateData,
                patientId: patientId
            };

            confirmModal.show();
        }

        // Perform the actual save operation
        function performSave(change) {
            const { cell, newValue, updateData, patientId } = change;

            fetch(`/api/patients/${patientId}`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(updateData)
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Update failed');
                }
                return response.json();
            })
            .then(data => {
                cell.textContent = newValue;
                cell.classList.remove('editing');
                currentEditingCell = null;
                delete cell.dataset.originalValue;
                showNotification('Patient updated successfully');
            })
            .catch(error => {
                console.error('Error updating patient:', error);
                showNotification('Error updating patient: ' + error.message, 'danger');
                cancelEdit(cell);
            });
        }

        // Cancel edit
        function cancelEdit(cell) {
            if (!cell.classList.contains('editing')) return;
            cell.textContent = cell.dataset.originalValue;
            cell.classList.remove('editing');
            currentEditingCell = null;
            delete cell.dataset.originalValue;
        }

        // Submit new patient
        function submitNewPatient() {
            const newPatient = {
                name: document.getElementById('name').value.trim(),
                middlename: document.getElementById('middlename').value.trim(),
                surname: document.getElementById('surname').value.trim(),
                gender: document.getElementById('gender').value.trim(),
                birthday: document.getElementById('birthday').value,
                birthplace: document.getElementById('birthplace').value.trim(),
                province: document.getElementById('province').value.trim(),
                address: document.getElementById('address').value.trim(),
                fiscalcode: document.getElementById('fiscalcode').value.trim(),
                business: document.getElementById('business').checked
            };

            // Validate required fields
            if (!newPatient.name || !newPatient.surname || !newPatient.fiscalcode ||
                !newPatient.gender || !newPatient.birthday || !newPatient.birthplace || !newPatient.province) {
                showNotification('Please fill in all required fields', 'danger');
                return;
            }

            fetch('/api/patients', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(newPatient)
            })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(err => {
                        throw new Error(err.details || 'Creation failed');
                    });
                }
                return response.json();
            })
            .then(data => {
                showNotification('Patient added successfully');
                bootstrap.Modal.getInstance(document.getElementById('addPatientModal')).hide();
                setTimeout(() => window.location.reload(), 1000);
            })
            .catch(error => {
                console.error('Error creating patient:', error);
                showNotification('Error creating patient: ' + error.message, 'danger');
            });
        }

        // Delete patient
        function deletePatient(id) {
            if (!confirm('Are you sure you want to delete this patient?')) return;

            fetch(`/api/patients/${id}`, {
                method: 'DELETE'
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Deletion failed');
                }
                return response.json();
            })
            .then(data => {
                const row = document.querySelector(`tr[data-patient-id="${id}"]`);
                if (row) row.remove();
                showNotification('Patient deleted successfully');
            })
            .catch(error => {
                console.error('Error deleting patient:', error);
                showNotification('Error deleting patient: ' + error.message, 'danger');
            });
        }

        // Close modal handler
        document.getElementById('addPatientModal').addEventListener('hidden.bs.modal', function () {
            document.getElementById('addPatientForm').reset();
        });

        // Fiscal code generation
        const requiredFields = ['name', 'surname', 'gender', 'birthday', 'birthplace'];
        const generateBtn = document.getElementById('generateFiscalCode');
        const fiscalcodeInput = document.getElementById('fiscalcode');

        function checkRequiredFields() {
            return requiredFields.every(field => {
                const input = document.getElementById(field);
                return input && input.value.trim() !== '';
            });
        }

        function generateFiscalCodeIfComplete() {
            if (checkRequiredFields()) {
                const name = document.getElementById('name').value;
                const surname = document.getElementById('surname').value;
                const gender = document.getElementById('gender').value;
                const birthday = document.getElementById('birthday').value;
                const birthplace = document.getElementById('birthplace').value;
                
                try {
                    const fiscalCode = generateFiscalCode(surname, name, gender, birthday, birthplace);
                    fiscalcodeInput.value = fiscalCode;
                    
                    if (!fiscalCode) {
                        showNotification('Error generating fiscal code', 'danger');
                    }
                } catch (error) {
                    console.error('Error during fiscal code generation:', error);
                    showNotification('Error generating fiscal code: ' + error.message, 'danger');
                }
            }
        }

        // Add event listeners to all required fields
        requiredFields.forEach(field => {
            const input = document.getElementById(field);
            if (input) {
                input.addEventListener('change', generateFiscalCodeIfComplete);
                input.addEventListener('blur', generateFiscalCodeIfComplete);
                input.addEventListener('input', generateFiscalCodeIfComplete);
            }
        });

        // Manual generation button
        generateBtn.addEventListener('click', () => {
            if (!checkRequiredFields()) {
                showNotification('Please fill in all required fields first', 'danger');
                return;
            }
            generateFiscalCodeIfComplete();
        });

        // Birthplace autocomplete functionality
        const birthplaceInput = document.getElementById('birthplace');
        const provinceInput = document.getElementById('province');
        const cityDropdown = document.getElementById('cityDropdown');
        let typingTimer;
        let currentCities = [];

        // Style the dropdown
        cityDropdown.style.position = 'absolute';
        cityDropdown.style.width = birthplaceInput.offsetWidth + 'px';
        cityDropdown.style.backgroundColor = '#fff';
        cityDropdown.style.border = '1px solid rgba(0,0,0,.15)';
        cityDropdown.style.borderRadius = '0.25rem';
        cityDropdown.style.zIndex = '1000';

        // Update dropdown position
        function updateDropdownPosition() {
            const rect = birthplaceInput.getBoundingClientRect();
            cityDropdown.style.top = (rect.bottom + window.scrollY) + 'px';
            cityDropdown.style.left = rect.left + 'px';
            cityDropdown.style.width = rect.width + 'px';
        }

        birthplaceInput.addEventListener('input', function() {
            clearTimeout(typingTimer);
            const searchTerm = this.value.trim();
            
            typingTimer = setTimeout(() => {
                if (searchTerm.length >= 2) {
                    fetch(`/api/cities/search?q=${encodeURIComponent(searchTerm)}`)
                        .then(response => response.json())
                        .then(cities => {
                            currentCities = cities;
                            updateDropdownPosition();
                            
                            cityDropdown.innerHTML = '';
                            
                            if (cities.length > 0) {
                                cities.forEach(city => {
                                    const item = document.createElement('a');
                                    item.className = 'dropdown-item';
                                    item.href = '#';
                                    item.textContent = `${city.city} (${city.province})`;
                                    item.style.padding = '0.5rem 1rem';
                                    item.style.display = 'block';
                                    item.style.cursor = 'pointer';
                                    
                                    item.addEventListener('click', (e) => {
                                        e.preventDefault();
                                        birthplaceInput.value = city.city;
                                        provinceInput.value = city.province;
                                        cityDropdown.style.display = 'none';
                                        generateFiscalCodeIfComplete();
                                    });

                                    item.addEventListener('mouseover', () => {
                                        item.style.backgroundColor = '#f8f9fa';
                                    });

                                    item.addEventListener('mouseout', () => {
                                        item.style.backgroundColor = '';
                                    });
                                    
                                    cityDropdown.appendChild(item);
                                });
                                
                                cityDropdown.style.display = 'block';
                            } else {
                                cityDropdown.style.display = 'none';
                            }
                        })
                        .catch(error => {
                            console.error('Error fetching cities:', error);
                            cityDropdown.style.display = 'none';
                        });
                } else {
                    cityDropdown.style.display = 'none';
                }
            }, 300);
        });

        // Close dropdown when clicking outside
        document.addEventListener('click', (e) => {
            if (!birthplaceInput.contains(e.target) && !cityDropdown.contains(e.target)) {
                cityDropdown.style.display = 'none';
            }
        });

        // Handle keyboard navigation
        birthplaceInput.addEventListener('keydown', (e) => {
            if (!cityDropdown.style.display || cityDropdown.style.display === 'none') return;
            
            const items = cityDropdown.getElementsByTagName('a');
            const activeItem = cityDropdown.querySelector('.active');
            let index = -1;
            
            if (activeItem) {
                index = Array.from(items).indexOf(activeItem);
            }
            
            switch (e.key) {
                case 'ArrowDown':
                    e.preventDefault();
                    if (index < items.length - 1) {
                        if (activeItem) activeItem.classList.remove('active');
                        items[index + 1].classList.add('active');
                        items[index + 1].scrollIntoView({ block: 'nearest' });
                    }
                    break;
                    
                case 'ArrowUp':
                    e.preventDefault();
                    if (index > 0) {
                        if (activeItem) activeItem.classList.remove('active');
                        items[index - 1].classList.add('active');
                        items[index - 1].scrollIntoView({ block: 'nearest' });
                    }
                    break;
                    
                case 'Enter':
                    e.preventDefault();
                    if (activeItem) {
                        activeItem.click();
                    }
                    break;
                    
                case 'Escape':
                    e.preventDefault();
                    cityDropdown.style.display = 'none';
                    break;
            }
        });

    </script>
</body>
</html>