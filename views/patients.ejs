<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Patient Management</title>
    <!-- Bootstrap 5.3.x CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
    <style>
        .editable-cell {
            cursor: pointer;
            min-height: 38px;
            padding: 0.375rem 0.75rem;
        }

        .editable-cell:hover {
            background-color: #f8f9fa;
        }

        .editing {
            background-color: #fff3cd;
        }
    </style>
</head>

<body>
    <div class="container-fluid py-4">
        <nav class="mb-3">
            <a href="/" class="btn btn-outline-primary">
                <i class="bi bi-house-door"></i> Home
            </a>
        </nav>
        <div class="row mb-4">
            <div class="col">
                <h1 class="display-4">Patient Management</h1>
            </div>
            <div class="col-auto">
                <button class="btn btn-success btn-lg" data-bs-toggle="modal" data-bs-target="#addPatientModal">
                    <i class="bi bi-plus-circle"></i> Add Patient
                </button>
            </div>
        </div>

        <div class="table-responsive">
            <table class="table table-striped table-hover table-bordered">
                <thead class="table-dark">
                    <tr>
                        <th>ID</th>
                        <th>Name</th>
                        <th>Middle Name</th>
                        <th>Surname</th>
                        <th>Address</th>
                        <th>Fiscal Code</th>
                        <th>Business</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% patients.forEach(patient => { %>
                    <tr data-patient-id="<%= patient.id %>">
                        <td class="align-middle"><%= patient.id %></td>
                        <td class="editable-cell" data-field="name" data-type="text" onclick="makeEditable(this)">
                            <%= patient.name %>
                        </td>
                        <td class="editable-cell" data-field="middlename" data-type="text" onclick="makeEditable(this)">
                            <%= patient.middlename || '' %>
                        </td>
                        <td class="editable-cell" data-field="surname" data-type="text" onclick="makeEditable(this)">
                            <%= patient.surname %>
                        </td>
                        <td class="editable-cell" data-field="address" data-type="text" onclick="makeEditable(this)">
                            <%= patient.address || '' %>
                        </td>
                        <td class="editable-cell" data-field="fiscalcode" data-type="text" onclick="makeEditable(this)">
                            <%= patient.fiscalcode %>
                        </td>
                        <td class="editable-cell" data-field="business" data-type="checkbox" onclick="makeEditable(this)">
                            <%= patient.business ? '✓' : '✗' %>
                        </td>
                        <td class="text-center">
                            <button class="btn btn-danger btn-sm" onclick="deletePatient(<%= patient.id %>)">
                                <i class="bi bi-trash"></i> Delete
                            </button>
                        </td>
                    </tr>
                    <% }); %>
                </tbody>
            </table>
        </div>
    </div>

    <!-- Add Patient Modal -->
    <div class="modal fade" id="addPatientModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add New Patient</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="addPatientForm">
                        <div class="mb-3">
                            <label for="name" class="form-label">Name</label>
                            <input type="text" class="form-control" id="name" required>
                        </div>
                        <div class="mb-3">
                            <label for="middlename" class="form-label">Middle Name</label>
                            <input type="text" class="form-control" id="middlename">
                        </div>
                        <div class="mb-3">
                            <label for="surname" class="form-label">Surname</label>
                            <input type="text" class="form-control" id="surname" required>
                        </div>
                        <div class="mb-3">
                            <label for="address" class="form-label">Address</label>
                            <input type="text" class="form-control" id="address">
                        </div>
                        <div class="mb-3">
                            <label for="fiscalcode" class="form-label">Fiscal Code</label>
                            <input type="text" class="form-control" id="fiscalcode" required>
                        </div>
                        <div class="mb-3 form-check">
                            <input type="checkbox" class="form-check-input" id="business">
                            <label class="form-check-label" for="business">Business</label>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-success" onclick="submitNewPatient()">Add Patient</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS and Popper.js -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
        // Current editing cell reference
        let currentEditingCell = null;

        // Helper function to show notifications
        function showNotification(message, type = 'success') {
            const toast = document.createElement('div');
            toast.className = `toast align-items-center text-white bg-${type} position-fixed top-0 end-0 m-3`;
            toast.setAttribute('role', 'alert');
            toast.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">${message}</div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                </div>
            `;
            document.body.appendChild(toast);
            const bsToast = new bootstrap.Toast(toast);
            bsToast.show();
            toast.addEventListener('hidden.bs.toast', () => toast.remove());
        }

        // Make cell editable
        function makeEditable(cell) {
            if (cell.classList.contains('editing')) return;

            if (currentEditingCell && currentEditingCell !== cell) {
                saveCell(currentEditingCell);
            }

            const field = cell.dataset.field;
            const type = cell.dataset.type;
            const currentValue = cell.textContent.trim();

            cell.dataset.originalValue = currentValue;
            cell.classList.add('editing');
            currentEditingCell = cell;

            let inputElement;
            if (type === 'checkbox') {
                inputElement = document.createElement('input');
                inputElement.type = 'checkbox';
                inputElement.className = 'form-check-input';
                inputElement.checked = currentValue === '✓';
                inputElement.addEventListener('change', () => saveCell(cell));
            } else {
                inputElement = document.createElement('input');
                inputElement.type = 'text';
                inputElement.className = 'form-control form-control-sm';
                inputElement.value = currentValue;

                inputElement.addEventListener('blur', () => {
                    setTimeout(() => saveCell(cell), 150);
                });
                inputElement.addEventListener('keydown', (e) => {
                    if (e.key === 'Enter') {
                        e.preventDefault();
                        saveCell(cell);
                    }
                    if (e.key === 'Escape') {
                        e.preventDefault();
                        cancelEdit(cell);
                    }
                });
            }

            cell.textContent = '';
            cell.appendChild(inputElement);

            if (type !== 'checkbox') {
                setTimeout(() => inputElement.focus(), 0);
            }
        }

        // Save edited cell
        function saveCell(cell) {
            if (!cell || !cell.classList.contains('editing')) return;

            const input = cell.querySelector('input');
            if (!input) return;

            const field = cell.dataset.field;
            const type = cell.dataset.type;
            const patientId = cell.closest('tr').dataset.patientId;
            let newValue;
            let updateData = {};

            if (type === 'checkbox') {
                newValue = input.checked ? '✓' : '✗';
                updateData[field] = input.checked;
            } else {
                newValue = input.value.trim();
                if (!newValue) {
                    if (field === 'name' || field === 'surname' || field === 'fiscalcode') {
                        showNotification(`${field} cannot be empty`, 'danger');
                        return;
                    }
                }
                updateData[field] = newValue;
            }

            fetch(`/api/patients/${patientId}`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(updateData)
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Update failed');
                }
                return response.json();
            })
            .then(data => {
                cell.textContent = newValue;
                cell.classList.remove('editing');
                currentEditingCell = null;
                delete cell.dataset.originalValue;
                showNotification('Patient updated successfully');
            })
            .catch(error => {
                console.error('Error updating patient:', error);
                showNotification('Error updating patient: ' + error.message, 'danger');
                cancelEdit(cell);
            });
        }

        // Cancel edit
        function cancelEdit(cell) {
            if (!cell.classList.contains('editing')) return;
            cell.textContent = cell.dataset.originalValue;
            cell.classList.remove('editing');
            currentEditingCell = null;
            delete cell.dataset.originalValue;
        }

        // Submit new patient
        function submitNewPatient() {
            const newPatient = {
                name: document.getElementById('name').value.trim(),
                middlename: document.getElementById('middlename').value.trim(),
                surname: document.getElementById('surname').value.trim(),
                address: document.getElementById('address').value.trim(),
                fiscalcode: document.getElementById('fiscalcode').value.trim(),
                business: document.getElementById('business').checked
            };

            // Validate required fields
            if (!newPatient.name || !newPatient.surname || !newPatient.fiscalcode) {
                showNotification('Please fill in all required fields', 'danger');
                return;
            }

            fetch('/api/patients', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(newPatient)
            })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(err => {
                        throw new Error(err.details || 'Creation failed');
                    });
                }
                return response.json();
            })
            .then(data => {
                showNotification('Patient added successfully');
                bootstrap.Modal.getInstance(document.getElementById('addPatientModal')).hide();
                setTimeout(() => window.location.reload(), 1000);
            })
            .catch(error => {
                console.error('Error creating patient:', error);
                showNotification('Error creating patient: ' + error.message, 'danger');
            });
        }

        // Delete patient
        function deletePatient(id) {
            if (!confirm('Are you sure you want to delete this patient?')) return;

            fetch(`/api/patients/${id}`, {
                method: 'DELETE'
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Deletion failed');
                }
                return response.json();
            })
            .then(data => {
                const row = document.querySelector(`tr[data-patient-id="${id}"]`);
                if (row) row.remove();
                showNotification('Patient deleted successfully');
            })
            .catch(error => {
                console.error('Error deleting patient:', error);
                showNotification('Error deleting patient: ' + error.message, 'danger');
            });
        }

        // Close modal handler
        document.getElementById('addPatientModal').addEventListener('hidden.bs.modal', function () {
            document.getElementById('addPatientForm').reset();
        });

    </script>
</body>
</html>