<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Invoice Management</title>
    <!-- Bootstrap 5.3.x CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
    <style>
        .editable-cell {
            cursor: pointer;
            min-height: 38px;
            padding: 0.375rem 0.75rem;
        }

        .editable-cell:hover {
            background-color: #f8f9fa;
        }

        .editing {
            background-color: #fff3cd;
        }

        .total-cell {
            font-weight: bold;
            background-color: #e7f5ff;
        }

        td strong {
            color: #0d6efd;
        }

        #patient-suggestions {
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        #patient-suggestions .list-group-item {
            cursor: pointer;
        }

        #patient-suggestions .list-group-item:hover {
            background-color: #f8f9fa;
        }

        #patient-suggestions .list-group-item.active {
            background-color: #0d6efd;
            color: white;
        }

        .patient-name {
            font-weight: bold;
            color: #0d6efd;
        }

        .patient-fiscalcode {
            font-size: 0.875rem;
            color: #6c757d;
        }
    </style>
</head>

<body>
    <div class="container-fluid py-4">
        <nav class="mb-3">
            <a href="/" class="btn btn-outline-primary">
                <i class="bi bi-house-door"></i> Home
            </a>
        </nav>
        <div class="row mb-4">
            <div class="col">
                <h1 class="display-4">Invoice Management</h1>
            </div>
            <div class="col-auto d-flex gap-2">
                <button class="btn btn-success btn-lg" onclick="addNewInvoice()">
                    <i class="bi bi-plus-circle"></i> Add Invoice
                </button>
                <button class="btn btn-primary btn-lg" onclick="exportToCSV()">
                    <i class="bi bi-file-earmark-spreadsheet"></i> Export CSV
                </button>
            </div>
        </div>

        <div class="table-responsive">
            <table class="table table-striped table-hover table-bordered">
                <thead class="table-dark">
                    <tr>
                        <th>ID</th>
                        <th>Patient Name</th>
                        <th>Due Amount</th>
                        <th>Withholding</th>
                        <th>Ritenuta</th>
                        <th>Total</th>
                        <th>System</th>
                        <th>Invoice Date</th>
                        <th>Traced</th>
                        <th>TS</th>
                        <th>Collected Date</th>
                        <th>Fiscal Code</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="invoiceTableBody">
                    <% if (invoices && invoices.length> 0) { %>
                        <% invoices.forEach(invoice=> { %>
                            <tr data-invoice-id="<%= invoice.id %>">
                                <td class="align-middle">
                                    <%= invoice.id %>
                                </td>
                                <td class="align-middle">
                                    <strong>
                                        <%= invoice.patient_name %>
                                    </strong>
                                </td>
                                <td class="editable-cell" data-field="dueamount" data-type="text"
                                    onclick="makeEditable(this)">
                                    <%= invoice.dueamount ? invoice.dueamount.replace('$', '€' ) : '€0,00' %>
                                </td>
                                <td class="align-middle bg-light" title="Auto-calculated">
                                    <%= invoice.withholding ? invoice.withholding.replace('$', '€' ) : '€0,00' %>                           
                                </td>
                                <td class="editable-cell" data-field="ritenuta" data-type="checkbox"
                                    onclick="makeEditable(this)">
                                    <%= parseFloat(invoice.ritenuta) > 0 ? '20%' : '0%' %>
                                </td>
                                <td class="total-cell align-middle" data-total>
                                    <%= invoice.total %>
                                </td>
                                <td class="editable-cell" data-field="system" data-type="select"
                                    onclick="makeEditable(this)">
                                    <%= invoice.system || 'Not Set' %>
                                </td>
                                <td class="editable-cell" data-field="invoicedate" data-type="date"
                                    onclick="makeEditable(this)">
                                    <%= invoice.invoicedate ? new Date(invoice.invoicedate).toLocaleDateString('en-CA')
                                        : '' %>
                                </td>
                                <td class="editable-cell" data-field="traced" data-type="checkbox"
                                    onclick="makeEditable(this)">
                                    <%= invoice.traced ? '✓' : '✗' %>
                                </td>
                                <td class="editable-cell" data-field="ts" data-type="checkbox"
                                    onclick="makeEditable(this)">
                                    <%= invoice.ts ? '✓' : '✗' %>
                                </td>
                                <td class="editable-cell" data-field="collecteddate" data-type="date"
                                    onclick="makeEditable(this)">
                                    <%= invoice.collecteddate ? new
                                        Date(invoice.collecteddate).toLocaleDateString('en-CA') : '' %>
                                </td>
                                <td class="editable-cell" data-field="fiscalcode" data-type="text"
                                    onclick="makeEditable(this)">
                                    <%= invoice.fiscalcode %>
                                </td>
                                <td class="align-middle text-center">
                                    <button class="btn btn-primary btn-sm me-1"
                                        onclick="downloadInvoicePDF(<%= invoice.id %>)">
                                        <i class="bi bi-file-pdf"></i> PDF
                                    </button>
                                    <button class="btn btn-danger btn-sm" onclick="deleteInvoice(<%= invoice.id %>)">
                                        <i class="bi bi-trash"></i> Delete
                                    </button>
                                </td>
                            </tr>
                            <% }) %>
                                <% } else { %>
                                    <tr>
                                        <td colspan="11" class="text-center text-muted py-4">No invoices found</td>
                                    </tr>
                                    <% } %>
                </tbody>
            </table>
        </div>
    </div>

    <!-- Add Invoice Modal -->
    <div class="modal fade" id="addInvoiceModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add New Invoice</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="addInvoiceForm">
                        <div class="mb-3">
                            <label for="dueamount" class="form-label">Due Amount (€)</label>
                            <input type="number" class="form-control" id="dueamount" value="0.00" step="0.01" min="0"
                                placeholder="0.00" onfocus="this.select()" required>
                        </div>
                        <div class="mb-3">
                            <label for="withholding" class="form-label">Withholding (€)</label>
                            <input type="number" class="form-control" id="withholding" value="0.00" step="0.01" min="0"
                                placeholder="0.00" readonly disabled onfocus="this.select()" required>
                        </div>
                        <div class="mb-3">
                            <label for="system" class="form-label">System</label>
                            <select class="form-select" id="system" required>
                                <option value="">Select payment system...</option>
                                <option value="Card">Card</option>
                                <option value="POS">POS</option>
                                <option value="Cash">Cash</option>
                                <option value="Bonifico">Bonifico</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="invoicedate" class="form-label">Invoice Date</label>
                            <input type="date" class="form-control" id="invoicedate" required>
                        </div>
                        <div class="mb-3 form-check">
                            <input type="checkbox" class="form-check-input" id="traced">
                            <label class="form-check-label" for="traced">Traced</label>
                        </div>
                        <div class="mb-3 form-check">
                            <input type="checkbox" class="form-check-input" id="ts">
                            <label class="form-check-label" for="ts">TS</label>
                        </div>
                        <div class="mb-3 form-check">
                            <input type="checkbox" class="form-check-input" id="ritenuta_checkbox">
                            <label class="form-check-label" for="ritenuta_checkbox">Apply Ritenuta (20%)</label>
                            <input type="hidden" id="ritenuta" value="0">
                        </div>
                        <div class="mb-3">
                            <label for="collecteddate" class="form-label">Collected Date</label>
                            <input type="date" class="form-control" id="collecteddate">
                        </div>
                        <div class="mb-3">
                            <label for="patient-search" class="form-label">Patient</label>
                            <div class="position-relative">
                                <input type="text" class="form-control" id="patient-search"
                                    placeholder="Start typing patient name..." autocomplete="off" required>
                                <input type="hidden" id="fiscalcode" name="fiscalcode">
                                <ul class="list-group position-absolute w-100" id="patient-suggestions"
                                    style="z-index: 1000; max-height: 200px; overflow-y: auto; display: none;">
                                </ul>
                            </div>
                            <small class="form-text text-muted" id="selected-patient"></small>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-success" onclick="submitNewInvoice()">Add Invoice</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Confirmation Modal -->
    <div class="modal fade" id="editConfirmationModal" tabindex="-1" aria-labelledby="editConfirmationModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editConfirmationModalLabel">Confirm Changes</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p></p>Are you sure you want to save these changes?</p>
                    <div class="card">
                        <div class="card-body">
                            <h6 class="card-subtitle mb-2 text-muted" id="fieldNamePreview"></h6>
                            <div class="row g-3">
                                <div class="col-md-6">
                                    <label class="form-label text-danger">Old Value</label>
                                    <div class="p-2 border rounded" id="oldValuePreview"></div>
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label text-success">New Value</label>
                                    <div class="p-2 border rounded" id="newValuePreview"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="confirmEdit">Save Changes</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap 5.3.x JS Bundle -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        let currentEditingCell = null;
        const paymentSystems = ['Card', 'POS', 'Cash', 'Bonifico'];

        // Helper function to parse currency string to number
        function parseAmount(amountStr) {
            if (!amountStr) return 0;
            const cleanStr = amountStr.replace(/[€$]/g, '').replace(',', '.').trim();
            const num = parseFloat(cleanStr);
            return isNaN(num) ? 0 : num;
        }

        // Helper function to format number as currency
        function formatCurrency(amount) {
            return '€' + amount.toFixed(2).replace('.', ',');
        }

        // Calculate and update total for a row
            function updateTotal(row) {
                const dueAmountCell = row.querySelector('[data-field="dueamount"]');
                const withholdingCell = row.querySelector('[data-field="withholding"]');
                const totalCell = row.querySelector('[data-total]');

                if (dueAmountCell && withholdingCell && totalCell) {
                    const dueAmount = parseAmount(dueAmountCell.textContent);
                    const withholding = parseAmount(withholdingCell.textContent);
                    const total = dueAmount + withholding;
                    totalCell.textContent = formatCurrency(total);

                    console.log('Total updated:', {
                        dueAmount,
                        withholding,
                        total: formatCurrency(total)
                    });
                }
            }

        // Make cell editable
        function makeEditable(cell) {
            // Prevent multiple edits
            if (cell.classList.contains('editing')) {
                return;
            }

            // If another cell is being edited, save it first
            if (currentEditingCell && currentEditingCell !== cell) {
                saveCell(currentEditingCell);
            }

            const field = cell.dataset.field;
            const type = cell.dataset.type;
            const currentValue = cell.textContent.trim();
            const invoiceId = cell.closest('tr').dataset.invoiceId;

            // Store original value for cancel
            cell.dataset.originalValue = currentValue;

            cell.classList.add('editing');
            currentEditingCell = cell;

            let inputElement;

            if (type === 'checkbox') {
                inputElement = document.createElement('input');
                inputElement.type = 'checkbox';
                inputElement.className = 'form-check-input';
                inputElement.checked = currentValue === '✓';
                inputElement.addEventListener('change', () => saveCell(cell));
            } else if (type === 'date') {
                inputElement = document.createElement('input');
                inputElement.type = 'date';
                inputElement.className = 'form-control form-control-sm';
                inputElement.value = currentValue;

                inputElement.addEventListener('blur', () => {
                    setTimeout(() => saveCell(cell), 150);
                });
                inputElement.addEventListener('keydown', (e) => {
                    if (e.key === 'Enter') {
                        e.preventDefault();
                        saveCell(cell);
                    }
                    if (e.key === 'Escape') {
                        e.preventDefault();
                        cancelEdit(cell);
                    }
                });
            } else if (type === 'select') {
                inputElement = document.createElement('select');
                inputElement.className = 'form-select form-select-sm';

                // Add options for payment systems
                const defaultOption = document.createElement('option');
                defaultOption.value = '';
                defaultOption.textContent = 'Select...';
                inputElement.appendChild(defaultOption);

                paymentSystems.forEach(system => {
                    const option = document.createElement('option');
                    option.value = system;
                    option.textContent = system;
                    if (system === currentValue) {
                        option.selected = true;
                    }
                    inputElement.appendChild(option);
                });

                // Use change event for select
                inputElement.addEventListener('change', (e) => {
                    e.stopPropagation();
                    saveCell(cell);
                });

                // Handle keyboard
                inputElement.addEventListener('keydown', (e) => {
                    if (e.key === 'Enter') {
                        e.preventDefault();
                        saveCell(cell);
                    }
                    if (e.key === 'Escape') {
                        e.preventDefault();
                        cancelEdit(cell);
                    }
                });

                // Prevent closing on mousedown inside select
                inputElement.addEventListener('mousedown', (e) => {
                    e.stopPropagation();
                });

            } else {
                inputElement = document.createElement('input');
                inputElement.type = 'text';
                inputElement.className = 'form-control form-control-sm';
                inputElement.value = currentValue.replace('€', '').trim();

                inputElement.addEventListener('blur', () => {
                    setTimeout(() => saveCell(cell), 150);
                });
                inputElement.addEventListener('keydown', (e) => {
                    if (e.key === 'Enter') {
                        e.preventDefault();
                        saveCell(cell);
                    }
                    if (e.key === 'Escape') {
                        e.preventDefault();
                        cancelEdit(cell);
                    }
                });
            }

            cell.textContent = '';
            cell.appendChild(inputElement);

            // Focus the input
            if (type !== 'checkbox') {
                setTimeout(() => {
                    inputElement.focus();
                    if (type === 'select') {
                        inputElement.size = paymentSystems.length + 1; // Show all options
                    }
                }, 0);
            }
        }

        // Save edited cell
        // Prepare cell data for saving
        function prepareCellData(cell) {
            const input = cell.querySelector('input, select');
            if (!input) return null;

            const field = cell.dataset.field;
            const type = cell.dataset.type;
            const invoiceId = cell.closest('tr').dataset.invoiceId;
            const row = cell.closest('tr');

            let newValue;
            let updateData = {};

            if (type === 'checkbox') {
                newValue = input.checked ? '✓' : '✗';
                updateData[field] = input.checked;
            } else if (type === 'select') {
                newValue = input.value;
                if (!newValue || newValue === '') {
                    return null;
                }
                updateData[field] = newValue;
            } else if (field === 'dueamount') {
                const amount = parseAmount(input.value);
                newValue = formatCurrency(amount);
                updateData[field] = newValue;
                updateData.withholding = amount > 77.47 ? '2.00' : '0.00';
            } else {
                newValue = input.value;
                updateData[field] = newValue;
            }

            return { cell, input, field, type, invoiceId, row, newValue, updateData };
        }

        // Actually save the cell data
        function processSaveCellData(data) {
            const { cell, row, newValue, updateData } = data;

            // Update the cell content
            if (cell.querySelector('input, select')) {
                cell.textContent = newValue;
            }

            cell.classList.remove('editing');
            currentEditingCell = null;
            delete cell.dataset.originalValue;

            // If it's a due amount change, update withholding and total
            if (data.field === 'dueamount') {
                const withholdingCell = row.querySelector('[data-field="withholding"]');
                if (withholdingCell) {
                    withholdingCell.textContent = formatCurrency(parseFloat(updateData.withholding));
                }
                setTimeout(() => updateTotal(row), 100);
            }

            // Send update to server
            fetch(`/api/invoices/${data.invoiceId}`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(updateData)
            })
                .then(response => {
                    if (!response.ok) throw new Error('Update failed');
                    return response.json();
                })
                .then(data => {
                    console.log('Invoice updated successfully:', data);

                    if (data.invoice) {
                        const serverWithholding = parseAmount(data.invoice.withholding);
                        const withholdingCell = row.querySelector('[data-field="withholding"]');
                        if (withholdingCell) {
                            withholdingCell.textContent = formatCurrency(serverWithholding);
                        }
                        setTimeout(() => updateTotal(row), 100);
                    }

                    showNotification('Invoice updated successfully', 'success');
                })
                .catch(error => {
                    console.error('Error updating invoice:', error);
                    showNotification('Error updating invoice', 'danger');
                    if (cell.dataset.originalValue) {
                        cell.textContent = cell.dataset.originalValue;
                    }
                });
        }

        // Save edited cell
        function saveCell(cell) {
            if (!cell || !cell.classList.contains('editing')) return;

            const cellData = prepareCellData(cell);
            if (!cellData) return;

            // Show confirmation modal
            const modalElement = document.getElementById('editConfirmationModal');
            const modal = new bootstrap.Modal(modalElement);
            
            // Get all preview elements
            const fieldNamePreview = document.getElementById('fieldNamePreview');
            const oldValuePreview = document.getElementById('oldValuePreview');
            const newValuePreview = document.getElementById('newValuePreview');
            
            // Format field name for display
            const fieldName = cellData.field.charAt(0).toUpperCase() + cellData.field.slice(1).replace(/([A-Z])/g, ' $1');
            
            // Set the preview values
            fieldNamePreview.textContent = fieldName;
            oldValuePreview.textContent = cell.dataset.originalValue || 'Empty';
            newValuePreview.textContent = cellData.newValue;

            // Clean up any existing modal backdrop
            const existingBackdrop = document.querySelector('.modal-backdrop');
            if (existingBackdrop) {
                existingBackdrop.remove();
            }

            // Set up confirmation button handler
            const confirmBtn = document.getElementById('confirmEdit');
            const confirmHandler = () => {
                processSaveCellData(cellData);
                modal.hide();
                cleanup();
            };

            // Set up modal hidden handler to restore original value if canceled
            const modalHiddenHandler = (event) => {
                if (event.target === modalElement && cell.classList.contains('editing')) {
                    cancelEdit(cell);
                }
                cleanup();
            };

            // Function to clean up event listeners and modal
            const cleanup = () => {
                confirmBtn.removeEventListener('click', confirmHandler);
                modalElement.removeEventListener('hidden.bs.modal', modalHiddenHandler);
                // Remove any lingering backdrop
                const backdrop = document.querySelector('.modal-backdrop');
                if (backdrop) {
                    backdrop.remove();
                }
                modalElement.classList.remove('show');
                document.body.classList.remove('modal-open');
            };

            // Add event listeners
            confirmBtn.addEventListener('click', confirmHandler);
            modalElement.addEventListener('hidden.bs.modal', modalHiddenHandler);

            modal.show();

                if (type === 'checkbox') {
                    newValue = input.checked;
                    cell.textContent = newValue ? '✓' : '✗';
                    updateData[field] = newValue;
                } else if (type === 'select') {
                    newValue = input.value;
                    // If empty value selected, restore original
                    if (!newValue || newValue === '') {
                        cell.textContent = cell.dataset.originalValue || 'Not Set';
                        cell.classList.remove('editing');
                        currentEditingCell = null;
                        return;
                    }
                    cell.textContent = newValue;
                    updateData[field] = newValue;
                } else if (field === 'dueamount') {
                    // Format currency fields
                    const amount = parseAmount(input.value);
                    newValue = formatCurrency(amount);
                    cell.textContent = newValue;
                    updateData[field] = newValue;

                    // Calculate and update withholding immediately on client side
                    const withholdingCell = row.querySelector('[data-field="withholding"]');
                    if (withholdingCell) {
                        const newWithholding = amount > 77.47 ? 2.00 : 0.00;
                        withholdingCell.textContent = formatCurrency(newWithholding);

                        // Include withholding in the update data
                        // Server will recalculate anyway, but this ensures UI is in sync
                        updateData.withholding = newWithholding.toFixed(2);
                    }

                    // Update the total when due amount changes
                    setTimeout(() => updateTotal(row), 100);
                } else {
                    newValue = input.value;
                    cell.textContent = newValue;
                    updateData[field] = newValue;
                }

                cell.classList.remove('editing');
                currentEditingCell = null;
                delete cell.dataset.originalValue;

                console.log('Updating invoice:', { invoiceId, updateData });

                // PATCH request to update invoice
                fetch(`/api/invoices/${invoiceId}`, {
                    method: 'PATCH',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(updateData)
                })
                    .then(response => {
                        if (!response.ok) throw new Error('Update failed');
                        return response.json();
                    })
                    .then(data => {
                        console.log('Invoice updated successfully:', data);

                        // Double-check server response and update UI if needed
                        if (data.invoice) {
                            const serverWithholding = parseAmount(data.invoice.withholding);
                            const withholdingCell = row.querySelector('[data-field="withholding"]');
                            if (withholdingCell) {
                                withholdingCell.textContent = formatCurrency(serverWithholding);
                            }

                            // Update total one more time with server values
                            setTimeout(() => updateTotal(row), 100);
                        }

                        showNotification('Invoice updated successfully', 'success');
                    })
                    .catch(error => {
                        console.error('Error updating invoice:', error);
                        showNotification('Error updating invoice', 'danger');
                        // Restore original value on error
                        if (cell.dataset.originalValue) {
                            cell.textContent = cell.dataset.originalValue;
                        }
                    });
            }
        // Cancel edit
        function cancelEdit(cell) {
            if (!cell) return;

            const originalValue = cell.dataset.originalValue;
            if (originalValue !== undefined) {
                cell.textContent = originalValue;
            }
            cell.classList.remove('editing');
            delete cell.dataset.originalValue;
            currentEditingCell = null;
        }

        // Close any open editor when clicking outside
        document.addEventListener('click', (e) => {
            if (currentEditingCell && !currentEditingCell.contains(e.target)) {
                // Check if click is not on the select dropdown
                const select = currentEditingCell.querySelector('select');
                if (!select || !e.target.closest('select')) {
                    saveCell(currentEditingCell);
                }
            }
        });

        // Delete invoice
        function deleteInvoice(invoiceId) {
            if (!confirm('Are you sure you want to delete this invoice?')) return;

            fetch(`/api/invoices/${invoiceId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                }
            })
                .then(response => {
                    if (!response.ok) throw new Error('Delete failed');
                    return response.json();
                })
                .then(data => {
                    console.log('Invoice deleted successfully:', data);
                    const row = document.querySelector(`tr[data-invoice-id="${invoiceId}"]`);
                    row.remove();
                    showNotification('Invoice deleted successfully', 'success');
                    checkEmptyTable();
                })
                .catch(error => {
                    console.error('Error deleting invoice:', error);
                    showNotification('Error deleting invoice', 'danger');
                });
        }


        // Show modal for adding invoice
        function addNewInvoice() {
            // Set today's date as default
            document.getElementById('invoicedate').valueAsDate = new Date();

            // Show the modal
            const modal = new bootstrap.Modal(document.getElementById('addInvoiceModal'));
            modal.show();

            // Wait for modal to be fully shown, then focus and select the first amount field
            document.getElementById('addInvoiceModal').addEventListener('shown.bs.modal', function () {
                const dueAmountInput = document.getElementById('dueamount');
                dueAmountInput.focus();
                dueAmountInput.select(); // This selects all the text in the input
            }, { once: true }); // Use 'once' so the event listener is removed after firing
        }

        // Submit new invoice from modal
    // Function to handle payment system changes
    function handleSystemChange() {
        const systemSelect = document.getElementById('system');
        const tracedCheckbox = document.getElementById('traced');
        
        // Set traced automatically for POS or Bonifico
        if (systemSelect.value === 'POS' || systemSelect.value === 'Bonifico') {
            tracedCheckbox.checked = true;
            tracedCheckbox.disabled = true;
        } else {
            tracedCheckbox.disabled = false;
        }
    }

    // Submit new invoice from modal
    // Function to calculate ritenuta
    function calculateRitenuta(dueAmount, applyRitenuta) {
        return applyRitenuta ? (dueAmount * 0.20) : 0;
    }

    // Add event listener to due amount and ritenuta checkbox
    document.getElementById('dueamount').addEventListener('change', function() {
        const dueAmount = parseFloat(this.value) || 0;
        const applyRitenuta = document.getElementById('ritenuta_checkbox').checked;
        document.getElementById('ritenuta').value = calculateRitenuta(dueAmount, applyRitenuta);
    });

    document.getElementById('ritenuta_checkbox').addEventListener('change', function() {
        const dueAmount = parseFloat(document.getElementById('dueamount').value) || 0;
        document.getElementById('ritenuta').value = calculateRitenuta(dueAmount, this.checked);
    });

    function submitNewInvoice() {
        const fiscalcode = document.getElementById('fiscalcode').value;
        const dueAmount = parseFloat(document.getElementById('dueamount').value) || 0;
        const system = document.getElementById('system').value;

        // Calculate withholding based on due amount
        const withholding = dueAmount > 77.47 ? 2.00 : 0.00;

        // Validate that a patient was selected
        if (!fiscalcode) {
            showNotification('Please select a patient from the list', 'danger');
            document.getElementById('patient-search').focus();
            return;
        }

        // Set traced based on system
        let traced = document.getElementById('traced').checked;
        if (system === 'POS' || system === 'Bonifico') {
            traced = true;
        }

        const newInvoice = {
            dueamount: dueAmount.toFixed(2),
            withholding: withholding.toFixed(2),
            system: system,
            invoicedate: document.getElementById('invoicedate').value,
            traced: traced,
            ts: document.getElementById('ts').checked,
            ritenuta: calculateRitenuta(dueAmount, document.getElementById('ritenuta_checkbox').checked),
            collecteddate: document.getElementById('collecteddate').value || null,
            fiscalcode: fiscalcode
        };

        // Validate required fields
        if (!newInvoice.system) {
            showNotification('Please select a payment system', 'danger');
            return;
        }

        console.log('Creating invoice with data:', newInvoice);

        fetch('/api/invoices', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(newInvoice)
        })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(err => {
                        throw new Error(err.details || 'Creation failed');
                    });
                }
                return response.json();
            })
            .then(data => {
                console.log('Invoice created successfully:', data);
                showNotification('Invoice created successfully', 'success');
                bootstrap.Modal.getInstance(document.getElementById('addInvoiceModal')).hide();
                setTimeout(() => window.location.reload(), 1000);
            })
            .catch(error => {
                console.error('Error creating invoice:', error);
                showNotification('Error creating invoice: ' + error.message, 'danger');
            });
    }

        // Check if table is empty and show message
        function checkEmptyTable() {
            const tbody = document.getElementById('invoiceTableBody');
            if (tbody.querySelectorAll('tr[data-invoice-id]').length === 0) {
                tbody.innerHTML = '<tr><td colspan="11" class="text-center text-muted py-4">No invoices found</td></tr>';
            }
        }

        // Show notification
        function showNotification(message, type) {
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show position-fixed top-0 start-50 translate-middle-x mt-3`;
            alertDiv.style.zIndex = '9999';
            alertDiv.innerHTML = `
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                `;
            document.body.appendChild(alertDiv);

            setTimeout(() => {
                alertDiv.remove();
            }, 3000);
        }

        // Patient autocomplete functionality
        let patients = [];
        let selectedPatientIndex = -1;

        // Initialize patients array when page loads
        document.addEventListener('DOMContentLoaded', function () {
    // Populate patients array from server data
    <% if (fiscalCodes && fiscalCodes.length > 0) { %>
                patients =[
            <% fiscalCodes.forEach((patient, index) => { %>
                {
                    fiscalcode: '<%= patient.fiscalcode %>',
                    fullName: '<%= patient.full_name %>'
                } <%= index < fiscalCodes.length - 1 ? ',' : '' %>
            <% }) %>
        ];
    <% } %>

    // Setup withholding auto-calculation when modal is shown
                document.getElementById('addInvoiceModal')?.addEventListener('shown.bs.modal', function () {
                    const dueAmountInput = document.getElementById('dueamount');

                    if (dueAmountInput) {
                        // Auto-focus and select due amount
                        dueAmountInput.focus();
                        dueAmountInput.select();

                        // Add input event listener for real-time calculation
                        dueAmountInput.addEventListener('input', calculateWithholding);

                        // Also trigger on blur
                        dueAmountInput.addEventListener('blur', calculateWithholding);

                        // Initial calculation
                        calculateWithholding();
                    }
                });

            // Remove event listeners when modal is hidden to prevent duplicates
            document.getElementById('addInvoiceModal')?.addEventListener('hidden.bs.modal', function () {
                const dueAmountInput = document.getElementById('dueamount');

                if (dueAmountInput) {
                    dueAmountInput.removeEventListener('input', calculateWithholding);
                    dueAmountInput.removeEventListener('blur', calculateWithholding);
                }
            });
});

        // Setup autocomplete when modal is shown
        document.getElementById('addInvoiceModal')?.addEventListener('shown.bs.modal', function () {
            const searchInput = document.getElementById('patient-search');
            const suggestionsBox = document.getElementById('patient-suggestions');
            const fiscalCodeInput = document.getElementById('fiscalcode');
            const selectedPatientText = document.getElementById('selected-patient');

            if (!searchInput) return;

            // Clear previous selections
            searchInput.value = '';
            fiscalCodeInput.value = '';
            selectedPatientText.textContent = '';
            suggestionsBox.style.display = 'none';
            selectedPatientIndex = -1;

            // Search and filter patients
            searchInput.addEventListener('input', function () {
                const query = this.value.toLowerCase().trim();
                suggestionsBox.innerHTML = '';
                selectedPatientIndex = -1;

                if (query.length < 2) {
                    suggestionsBox.style.display = 'none';
                    fiscalCodeInput.value = '';
                    selectedPatientText.textContent = '';
                    return;
                }

                // Filter patients
                const filteredPatients = patients.filter(patient =>
                    patient.fullName.toLowerCase().includes(query) ||
                    patient.fiscalcode.toLowerCase().includes(query)
                );

                if (filteredPatients.length === 0) {
                    suggestionsBox.style.display = 'none';
                    return;
                }

                // Display suggestions
                filteredPatients.forEach((patient, index) => {
                    const li = document.createElement('li');
                    li.className = 'list-group-item list-group-item-action';
                    li.innerHTML = `
                <div class="patient-name">${highlightMatch(patient.fullName, query)}</div>
                <div class="patient-fiscalcode">${patient.fiscalcode}</div>
            `;
                    li.dataset.index = index;
                    li.dataset.fiscalcode = patient.fiscalcode;
                    li.dataset.fullname = patient.fullName;

                    li.addEventListener('click', function () {
                        selectPatient(this.dataset.fiscalcode, this.dataset.fullname);
                    });

                    suggestionsBox.appendChild(li);
                });

                suggestionsBox.style.display = 'block';
            });

            // Keyboard navigation
            searchInput.addEventListener('keydown', function (e) {
                const items = suggestionsBox.querySelectorAll('.list-group-item');

                if (e.key === 'ArrowDown') {
                    e.preventDefault();
                    selectedPatientIndex = Math.min(selectedPatientIndex + 1, items.length - 1);
                    updateSelection(items);
                } else if (e.key === 'ArrowUp') {
                    e.preventDefault();
                    selectedPatientIndex = Math.max(selectedPatientIndex - 1, 0);
                    updateSelection(items);
                } else if (e.key === 'Enter') {
                    e.preventDefault();
                    if (selectedPatientIndex >= 0 && items[selectedPatientIndex]) {
                        const selected = items[selectedPatientIndex];
                        selectPatient(selected.dataset.fiscalcode, selected.dataset.fullname);
                    }
                } else if (e.key === 'Escape') {
                    suggestionsBox.style.display = 'none';
                    selectedPatientIndex = -1;
                }
            });

            // Close suggestions when clicking outside
            document.addEventListener('click', function (e) {
                if (!searchInput.contains(e.target) && !suggestionsBox.contains(e.target)) {
                    suggestionsBox.style.display = 'none';
                    selectedPatientIndex = -1;
                }
            });

            // Helper function to highlight matching text
            function highlightMatch(text, query) {
                const regex = new RegExp(`(${query})`, 'gi');
                return text.replace(regex, '<mark>$1</mark>');
            }

            // Helper function to update keyboard selection
            function updateSelection(items) {
                items.forEach((item, index) => {
                    if (index === selectedPatientIndex) {
                        item.classList.add('active');
                        item.scrollIntoView({ block: 'nearest' });
                    } else {
                        item.classList.remove('active');
                    }
                });
            }

            // Helper function to select a patient
            function selectPatient(fiscalcode, fullName) {
                searchInput.value = fullName;
                fiscalCodeInput.value = fiscalcode;
                selectedPatientText.textContent = `Selected: ${fullName} (${fiscalcode})`;
                selectedPatientText.classList.remove('text-danger');
                selectedPatientText.classList.add('text-success');
                suggestionsBox.style.display = 'none';
                selectedPatientIndex = -1;
            }
        });

        // Download/View Invoice PDF with options
        function downloadInvoicePDF(invoiceId) {
            const pdfUrl = `/api/invoices/${invoiceId}/pdf`;

            // Create a small modal or use confirm
            const choice = confirm('Click OK to VIEW the PDF in browser, or CANCEL to DOWNLOAD it directly.');

            if (choice) {
                // View in browser (can print from there)
                window.open(pdfUrl, '_blank');
                showNotification('Opening invoice PDF...', 'info');
            } else {
                // Force download
                const link = document.createElement('a');
                link.href = pdfUrl;
                link.download = `invoice-${invoiceId}.pdf`;
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                showNotification('Downloading invoice PDF...', 'success');
            }
        }

        // Calculate withholding based on due amount
            function calculateWithholding() {
                const dueAmountInput = document.getElementById('dueamount');
                const withholdingInput = document.getElementById('withholding');

                if (!dueAmountInput || !withholdingInput) return;

                const dueAmount = parseFloat(dueAmountInput.value) || 0;

                // If due amount > 77.47, set withholding to 2.00, otherwise 0.00
                if (dueAmount > 77.47) {
                    withholdingInput.value = '2.00';
                } else {
                    withholdingInput.value = '0.00';
                }
            }

            // Update the addNewInvoice function
            function addNewInvoice() {
                // Set today's date as default
                document.getElementById('invoicedate').valueAsDate = new Date();

                // Reset form fields
                document.getElementById('withholding').value = '0.00';
                document.getElementById('dueamount').value = '0.00';
                document.getElementById('system').value = '';
                document.getElementById('traced').checked = false;
                document.getElementById('traced').disabled = false;
                document.getElementById('ts').checked = false;
                document.getElementById('collecteddate').value = '';
                document.getElementById('patient-search').value = '';
                document.getElementById('fiscalcode').value = '';
                document.getElementById('selected-patient').textContent = '';

                // Show the modal
                const modal = new bootstrap.Modal(document.getElementById('addInvoiceModal'));
                modal.show();

                // Setup system change handler
                const systemSelect = document.getElementById('system');
                systemSelect.addEventListener('change', handleSystemChange);
            }

            function exportToCSV() {
                // Get all rows from the table
                const table = document.querySelector('.table');
                const rows = Array.from(table.querySelectorAll('tbody tr'));
                
                // Define headers (using Italian terms as shown in the UI)
                const headers = [
                    'ID',
                    'Patient Name',
                    'Due Amount',
                    'Withholding',
                    'Ritenuta',
                    'Total',
                    'System',
                    'Invoice Date',
                    'Traced',
                    'TS',
                    'Collected Date',
                    'Fiscal Code'
                ];
                
                // Convert rows to CSV data
                const csvData = rows.map(row => {
                    const cells = Array.from(row.querySelectorAll('td'));
                    return [
                        cells[0].textContent.trim(), // ID
                        cells[1].textContent.trim(), // Patient Name
                        cells[2].textContent.trim(), // Due Amount
                        cells[3].textContent.trim(), // Withholding
                        cells[9].textContent.trim(), // Ritenuta
                        cells[4].textContent.trim(), // Total
                        cells[5].textContent.trim(), // System
                        cells[6].textContent.trim(), // Invoice Date
                        cells[7].textContent.trim(), // Traced
                        cells[8].textContent.trim(), // TS
                        cells[10].textContent.trim(), // Collected Date
                        cells[11].textContent.trim()  // Fiscal Code
                    ];
                });
                
                // Add headers to the beginning
                csvData.unshift(headers);
                
                // Convert to CSV string with proper line endings
                const csvContent = csvData.map(row => 
                    row.map(cell => {
                        // Ensure cell is a string and clean it
                        const cellStr = String(cell).trim();
                        // Wrap in quotes if contains comma, quotes, or newlines
                        if (cellStr.includes(',') || cellStr.includes('"') || cellStr.includes('\n') || cellStr.includes('\r')) {
                            return `"${cellStr.replace(/"/g, '""')}"`;
                        }
                        return cellStr;
                    }).join(',')
                ).join('\r\n'); // Use Windows-style line endings for Excel compatibility

                // Add BOM for Excel UTF-8 compatibility
                const BOM = '\uFEFF';
                
                // Create blob and download
                const blob = new Blob([BOM + csvContent], { type: 'text/csv;charset=utf-8;' });
                const link = document.createElement('a');
                const date = new Date().toISOString().split('T')[0];
                
                link.href = URL.createObjectURL(blob);
                link.download = `invoices_${date}.csv`;
                link.style.display = 'none';
                
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            }

    </script>
</body>

</html>

